// model with 2 regions
ctmc

const int maxPop = 1000;

// Original constants
const double c1 = 0.5;   // goat birth rate
const double c2 = 0.02 / (maxPop/100);  // predation rate
const double c3 = 0.7;    // tiger death rate

// New migration constants (per-individual rates)
const double migrate_g;  // goat migration rate 0.3
const double migrate_t; // tiger migration rate 0.3

// Region-specific initial populations
const int init_g1 = floor(maxPop/2);  // Region1 initial goats floor(maxPop/2);
const int init_t1 = floor(maxPop/2);  // Region1 initial tigers floor(maxPop/2);
const int init_g2 = floor(maxPop/2);  // Region2 initial goats 0
const int init_t2 = floor(maxPop/2);  // Region2 initial tigers 0

const double eps  = 1e-6;

// Region 1 module (renamed from original)
module Region1
    g1 : [0..maxPop] init init_g1;   // goats in region1
    t1 : [0..maxPop] init init_t1;   // tigers in region1

    // Goat reproduction (local)
    [growth1] (g1>0) & (g1<maxPop) -> c1*g1 : (g1'=g1+1);

    // Predation (local)
    [pred1] (g1>0) & (t1>0) & (t1<maxPop) -> c2*g1*t1 : (g1'=g1-1) & (t1'=t1+1);

    // Tiger death (local)
    [death1] (t1>0) -> c3*t1 : (t1'=t1-1);

    // Outgoing migrations (active transitions)
    [mig_g1_to_2] (g1>0) & (g2<maxPop) & (migrate_g>0) -> migrate_g*g1*(1-g2/maxPop)*(1 + t1/(t1+t2+eps)) : (g1'=g1-1);  // goat to region2
    [mig_t1_to_2] (t1>0) & (t2<maxPop) & (migrate_t>0) -> migrate_t*t1*(1-t2/maxPop)*(1 + g2/(g1+g2+eps)) : (t1'=t1-1);  // tiger to region2

    // Incoming migrations (passive transitions)
    [mig_g2_to_1] (g2>0) & (g1<maxPop) -> 1 : (g1'=g1+1);  // goat from region2
    [mig_t2_to_1] (t2>0) & (t1<maxPop) -> 1 : (t1'=t1+1);  // tiger from region2
endmodule

// Region 2 (renamed with variables/labels adjusted)
module Region2 = Region1 [
    g1 = g2,
    g2 = g1, 
    init_g1 = init_g2,
    init_t1 = init_t2,
    t1 = t2,
    t2 = t1,
    growth1 = growth2,
    pred1 = pred2,
    death1 = death2,
    mig_g1_to_2 = mig_g2_to_1,  // reverse direction
    mig_t1_to_2 = mig_t2_to_1,
    mig_g2_to_1 = mig_g1_to_2,
    mig_t2_to_1 = mig_t1_to_2
] endmodule

// System-wide rewards
rewards "total_goats"
    true : g1 + g2;
endrewards

rewards "total_tigers"
    true : t1 + t2;
endrewards

rewards "g1"
    true : g1;
endrewards

rewards "g2"
    true : g2;
endrewards

rewards "t1"
    true : t1;
endrewards

rewards "t2"
    true : t2;
endrewards

rewards "time"
    true : 1;
endrewards

//rewards "goats_at_tiger_extinction"
//  [die] (tigers = 1) : goats;
//endrewards
