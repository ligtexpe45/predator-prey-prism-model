//────────────────────────────────── Constants ──────────────────────────────────

ctmc

const int    maxPop    = 1000;
const double c1        = 0.5;                       // goat birth rate
const double c2        = 0.02 / (maxPop/100);       // predation rate
const double c3        = 0.7;                       // tiger death rate
const double migrate_g;                     // per‐individual goat migration
const double migrate_t;                     // per‐individual tiger migration
const double eps       = 1e-6;

// initial populations in each region
const int init_g1 = 300;  
const int init_t1 =    0;
const int init_g2 =   0;
const int init_t2 =   0;
const int init_g3 =   0;
const int init_t3 = 300;

//─────────────────────────────── Region 1 ────────────────────────────────
module Region1
    g1 : [0..maxPop] init init_g1;
    t1 : [0..maxPop] init init_t1;

    // local dynamics
    [growth1]   (g1>0) & (g1<maxPop)                -> c1*g1                  : (g1'=g1+1);
    [pred1]     (g1>0) & (t1>0) & (t1<maxPop)        -> c2*g1*t1               : (g1'=g1-1) & (t1'=t1+1);
    [death1]    (t1>0)                                -> c3*t1                  : (t1'=t1-1);

    // migration to Region 2 (active)
    [mig_g1_to_2] (g1>0) & (g2<maxPop)               -> migrate_g*g1*(1-g2/maxPop)*(1 + t1/(t1+t2+eps)) 
                                                       : (g1'=g1-1);
    [mig_t1_to_2] (t1>0) & (t2<maxPop)               -> migrate_t*t1*(1-t2/maxPop)*(1 + g1/(g1+g2+eps)) 
                                                       : (t1'=t1-1);

    // migration from Region 2 back to 1 (passive)
    [mig_g2_to_1] (g2>0) & (g1<maxPop)               -> 1                       : (g1'=g1+1);
    [mig_t2_to_1] (t2>0) & (t1<maxPop)               -> 1                       : (t1'=t1+1);
endmodule

//─────────────────────────────── Region 2 ────────────────────────────────
module Region2
    g2 : [0..maxPop] init init_g2;
    t2 : [0..maxPop] init init_t2;

    // local dynamics
    [growth2]   (g2>0) & (g2<maxPop)                -> c1*g2                  : (g2'=g2+1);
    [pred2]     (g2>0) & (t2>0) & (t2<maxPop)        -> c2*g2*t2               : (g2'=g2-1) & (t2'=t2+1);
    [death2]    (t2>0)                                -> c3*t2                  : (t2'=t2-1);

    // migration to Region 1 (active)
    [mig_g2_to_1] (g2>0) & (g1<maxPop)               -> migrate_g*g2*(1-g1/maxPop)*(1 + t2/(t2+t1+eps)) 
                                                       : (g2'=g2-1);
    [mig_t2_to_1] (t2>0) & (t1<maxPop)               -> migrate_t*t2*(1-t1/maxPop)*(1 + g2/(g1+g2+eps)) 
                                                       : (t2'=t2-1);

    // migration to Region 3 (active)
    [mig_g2_to_3] (g2>0) & (g3<maxPop)               -> migrate_g*g2*(1-g3/maxPop)*(1 + t2/(t2+t3+eps)) 
                                                       : (g2'=g2-1);
    [mig_t2_to_3] (t2>0) & (t3<maxPop)               -> migrate_t*t2*(1-t3/maxPop)*(1 + g2/(g2+g3+eps)) 
                                                       : (t2'=t2-1);

    // migration from Region 1 back to 2 (passive)
    [mig_g1_to_2] (g1>0) & (g2<maxPop)               -> 1                       : (g2'=g2+1);
    [mig_t1_to_2] (t1>0) & (t2<maxPop)               -> 1                       : (t2'=t2+1);

    // migration from Region 3 back to 2 (passive)
    [mig_g3_to_2] (g3>0) & (g2<maxPop)               -> 1                       : (g2'=g2+1);
    [mig_t3_to_2] (t3>0) & (t2<maxPop)               -> 1                       : (t2'=t2+1);
endmodule

//─────────────────────────────── Region 3 ────────────────────────────────
module Region3
    g3 : [0..maxPop] init init_g3;
    t3 : [0..maxPop] init init_t3;

    // local dynamics
    [growth3]   (g3>0) & (g3<maxPop)                -> c1*g3                  : (g3'=g3+1);
    [pred3]     (g3>0) & (t3>0) & (t3<maxPop)        -> c2*g3*t3               : (g3'=g3-1) & (t3'=t3+1);
    [death3]    (t3>0)                                -> c3*t3                  : (t3'=t3-1);

    // migration to Region 2 (active)
    [mig_g3_to_2] (g3>0) & (g2<maxPop)               -> migrate_g*g3*(1-g2/maxPop)*(1 + t3/(t3+t2+eps)) 
                                                       : (g3'=g3-1);
    [mig_t3_to_2] (t3>0) & (t2<maxPop)               -> migrate_t*t3*(1-t2/maxPop)*(1 + g3/(g2+g3+eps)) 
                                                       : (t3'=t3-1);

    // migration from Region 2 back to 3 (passive)
    [mig_g2_to_3] (g2>0) & (g3<maxPop)               -> 1                       : (g3'=g3+1);
    [mig_t2_to_3] (t2>0) & (t3<maxPop)               -> 1                       : (t3'=t3+1);
endmodule

//─────────────────────────────── Rewards ────────────────────────────────
rewards "total_goats"
    true : g1 + g2 + g3;
endrewards

rewards "total_tigers"
    true : t1 + t2 + t3;
endrewards

rewards "time"
    true : 1;
endrewards

