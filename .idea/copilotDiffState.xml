<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Predator-Prey Prism Model&#10;&#10;This repository contains Python scripts and simulation results for modeling and analyzing predator-prey dynamics (goats and tigers) in one, two, or three regions. The project focuses on population dynamics, extinction probabilities, and synchronization between regions using statistical and visualization tools.&#10;&#10;**Naming convention:** Files and folders starting with **1_** are for one region, **2_** for two regions, and **3_** for three regions.&#10;&#10;## Features&#10;- Simulate population dynamics of goats and tigers in multiple regions&#10;- Analyze extinction probabilities and population averages&#10;- Compute synchronization (Pearson correlation) between regions&#10;- Visualize results with publication-ready plots&#10;&#10;## Installation&#10;1. Clone this repository:&#10;   ```bash&#10;   git clone &lt;repo-url&gt;&#10;   cd PythonProject&#10;   ```&#10;2. Install required Python packages:&#10;   ```bash&#10;   pip install pandas matplotlib scipy&#10;   ```&#10;&#10;## Usage&#10;Run the analysis scripts from the project root. Example:&#10;```bash&#10;python 1_plot.py&#10;python 2_plot_sync.py&#10;python 3_plot_three_regions.py&#10;```&#10;&#10;Each script reads simulation data (e.g., `populations.txt`) and generates plots in the Results directory.&#10;&#10;## Main Scripts&#10;&#10;### One Region&#10;- **1_plot.py**: Plots goat and tiger populations over time for a single region.&#10;- **1_plot_period.py**: Analyzes and plots population periods for one region.&#10;- **1_plot_phasePortrait.py**: Plots phase portraits for one region.&#10;&#10;### Two Regions&#10;- **2_plot_sync.py**: Computes and plots synchronization (Pearson correlation) between goat populations in two regions using a sliding window.&#10;- **2_calculate_sync_pearson.py**: Calculates overall Pearson correlation between two goat populations.&#10;- **2_both_goats_graph.py**: Plots goat populations for two regions.&#10;- **2_both_tigers_graph.py**: Plots tiger populations for two regions.&#10;- **2_plot_two_regions.py**: Plots population dynamics for two regions.&#10;&#10;### Three Regions&#10;- **3_plot_three_regions.py**: Visualizes population dynamics for goats and tigers in three regions using subplots.&#10;&#10;Other scripts in the repository provide additional analysis and plotting capabilities. Refer to each script for its specific functionality and usage.&#10;&#10;## Results Directory Structure&#10;&#10;### One Region&#10;- **1_averagepop_vs_initialpop_after100_maxpop_100/**: Plots and data for average populations vs initial populations.&#10;- **1_averagepop_vs_maxpop_after100_starthalf/**: Plots and data for average populations vs max population (start half of max population).&#10;- **1_extinction_vs_systemParameters/**: Extinction probability analysis and plots.&#10;- **1_One Region Simulation/**: Simulation outputs and plots for one region.&#10;- **1_Population_vs_systemParameters/**: Population vs system parameter analysis and plots.&#10;- **1_tigers_extinction_probability_vs_initialGoats_and_initialTigers/**: Extinction probability heatmaps and data.&#10;&#10;### Two Regions&#10;- **2_averagepop_vs_maxpop_after100_starthalf1_zero2/**: Plots and data for average populations vs max population region 1 start at half of max population, region 2 starts at zero).&#10;- **2_synchronization_vs_migration/**: Synchronization analysis and plots for migration scenarios.&#10;- **2_Two Regions Simulations/**: Simulation outputs and plots for two regions.&#10;&#10;### Three Regions&#10;- **3_extinction_vs_migration_rate/**: Extinction probability vs migration rate analysis and plots for three regions.&#10;&#10;Other subfolders contain PDF plots, data files, and additional scripts for each scenario. Refer to each folder for its specific results and analysis.&#10;&#10;## License&#10;This project is for academic and research purposes. Please cite appropriately if used in publications.&#10;&#10;## Contact&#10;For questions or collaboration, please contact the repository owner.&#10;" />
              <option name="updatedContent" value="# Predator-Prey Prism Model&#10;&#10;This repository contains Python scripts and simulation results for modeling and analyzing predator-prey dynamics (goats and tigers) in one, two, or three regions. The project focuses on population dynamics, extinction probabilities, and synchronization between regions using statistical and visualization tools.&#10;&#10;**Naming convention:** Files and folders starting with **1_** are for one region, **2_** for two regions, and **3_** for three regions.&#10;&#10;## Features&#10;- Simulate population dynamics of goats and tigers in multiple regions&#10;- Analyze extinction probabilities and population averages&#10;- Compute synchronization (Pearson correlation) between regions&#10;- Visualize results with publication-ready plots&#10;&#10;## Installation&#10;1. Clone this repository:&#10;   ```bash&#10;   git clone &lt;repo-url&gt;&#10;   cd PythonProject&#10;   ```&#10;2. Install required Python packages:&#10;   ```bash&#10;   pip install pandas matplotlib scipy&#10;   ```&#10;&#10;## Usage&#10;Run the analysis scripts from the project root. Example:&#10;```bash&#10;python 1_plot.py&#10;python 2_plot_sync.py&#10;python 3_plot_three_regions.py&#10;```&#10;&#10;Each script reads simulation data (e.g., `populations.txt`) and generates plots in the Results directory.&#10;&#10;## Main Scripts&#10;&#10;### One Region&#10;- **1_plot.py**: Plots goat and tiger populations over time for a single region.&#10;- **1_plot_period.py**: Analyzes and plots population periods for one region.&#10;- **1_plot_phasePortrait.py**: Plots phase portraits for one region.&#10;&#10;### Two Regions&#10;- **2_plot_sync.py**: Computes and plots synchronization (Pearson correlation) between goat populations in two regions using a sliding window.&#10;- **2_calculate_sync_pearson.py**: Calculates overall Pearson correlation between two goat populations.&#10;- **2_both_goats_graph.py**: Plots goat populations for two regions.&#10;- **2_both_tigers_graph.py**: Plots tiger populations for two regions.&#10;- **2_plot_two_regions.py**: Plots population dynamics for two regions.&#10;&#10;### Three Regions&#10;- **3_plot_three_regions.py**: Visualizes population dynamics for goats and tigers in three regions using subplots.&#10;&#10;Other scripts in the repository provide additional analysis and plotting capabilities. Refer to each script for its specific functionality and usage.&#10;&#10;## Results Directory Structure&#10;&#10;### One Region&#10;- **1_averagepop_vs_initialpop_after100_maxpop_100/**: Plots and data for average populations vs initial populations.&#10;- **1_averagepop_vs_maxpop_after100_starthalf/**: Plots and data for average populations vs max population (start half of max population).&#10;- **1_extinction_vs_systemParameters/**: Extinction probability analysis and plots.&#10;- **1_One Region Simulation/**: Simulation outputs and plots for one region.&#10;- **1_Population_vs_systemParameters/**: Population vs system parameter analysis and plots.&#10;- **1_tigers_extinction_probability_vs_initialGoats_and_initialTigers/**: Extinction probability heatmaps and data.&#10;- **1_Goats and Tigers extinction probability vs maxPop/**: Extinction probability vs max population for goats and tigers.&#10;&#10;### Two Regions&#10;- **2_averagepop_vs_maxpop_after100_starthalf1_zero2/**: Plots and data for average populations vs max population region 1 start at half of max population, region 2 starts at zero).&#10;- **2_synchronization_vs_migration/**: Synchronization analysis and plots for migration scenarios.&#10;- **2_Two Regions Simulations/**: Simulation outputs and plots for two regions.&#10;- **2_Goats and Tigers extinction probability vs maxPop/**: Extinction probability vs max population for goats and tigers in two regions.&#10;&#10;### Three Regions&#10;- **3_extinction_vs_migration_rate/**: Extinction probability vs migration rate analysis and plots for three regions.&#10;&#10;Other subfolders contain PDF plots, data files, and additional scripts for each scenario. Refer to each folder for its specific results and analysis.&#10;&#10;## License&#10;This project is for academic and research purposes. Please cite appropriately if used in publications.&#10;&#10;## Contact&#10;For questions or collaboration, please contact the repository owner." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Results/3_extinction_vs_migration_rate/3_extinction_vs_migration.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Results/3_extinction_vs_migration_rate/3_extinction_vs_migration.py" />
              <option name="originalContent" value="# Script for Three Regions&#10;# This script runs a PRISM model simulation to analyze the extinction probabilities of goats and tigers&#10;# as a function of migration rates. It generates plots for the extinction probabilities of both species&#10;# and saves the results to a CSV file.&#10;&#10;# Simulation Parameters&#10;# Goats1: 300&#10;# Tigers1: 0&#10;# Goats2: 0&#10;# Tigers2: 0&#10;# Goats3: 0&#10;# Tigers3: 300&#10;&#10;&#10;import subprocess&#10;import os&#10;import re&#10;&#10;import numpy as np&#10;import pandas as pd&#10;&#10;# ─── CONFIG ────────────────────────────────────────────────────────────────────&#10;PRISM_EXE = &quot;/home/mohamed/Documents/prism-4.8.1-linux64-x86/bin/prism&quot;&#10;MODEL_FILE = &quot;/home/mohamed/Documents/mg_3.prism&quot;&#10;# number of simulation samples per PRISM call&#10;SIM_SAMPLES = 100&#10;# range of migration rates to sweep&#10;mig_rates = np.arange(0.001, 0.05, 0.00145)&#10;# output directory for plots &amp; CSV&#10;OUT_DIR = &quot;/home/mohamed/PycharmProjects/PythonProject/Results/3_extinction_vs_migration_rate&quot;&#10;os.makedirs(OUT_DIR, exist_ok=True)&#10;&#10;&#10;# ────────────────────────────────────────────────────────────────────────────────&#10;&#10;&#10;def run_prism_query(prism_exe, model_file, props_file, const_str, simsamp):&#10;    cmd = [&#10;        prism_exe,&#10;        model_file,&#10;        props_file,&#10;        &quot;-sim&quot;,&#10;        &quot;-simsamples&quot;, str(simsamp),&#10;        &quot;-const&quot;, const_str&#10;    ]&#10;    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)&#10;    out = proc.stdout.splitlines()&#10;&#10;    # Regex to capture number after &quot;Result:&quot;&#10;    result_pattern = re.compile(r&quot;Result:\s*([0-9.]+)&quot;)&#10;    results = [float(m.group(1)) for line in out if (m := result_pattern.search(line))]&#10;&#10;    if len(results) != 2:&#10;        raise RuntimeError(f&quot;Expected 2 results, got {results}\nFull PRISM output:\n&quot; + &quot;\n&quot;.join(out))&#10;    return results  # [P_goats_extinct, P_tigers_extinct]&#10;&#10;&#10;def main():&#10;    props_file = '/home/mohamed/PycharmProjects/PythonProject/Results/3_extinction_vs_migration_rate/ex.props'&#10;&#10;    records = []&#10;    for m in mig_rates:&#10;        const_override = f&quot;migrate_g={m:.6f},migrate_t={m:.6f}&quot;&#10;        print(f&quot;→ running PRISM for migrate = {m:.6f} ...&quot;, end=&quot; &quot;)&#10;        try:&#10;            p_goats, p_tigers = run_prism_query(&#10;                PRISM_EXE, MODEL_FILE, props_file, const_override, SIM_SAMPLES&#10;            )&#10;        except Exception as e:&#10;            print(&quot;ERROR:&quot;, e)&#10;            break&#10;        print(f&quot;  P_goats={p_goats:.4f}, P_tigers={p_tigers:.4f}&quot;)&#10;&#10;        records.append({&#10;            &quot;migrate&quot;: m,&#10;            &quot;P_extinct_goats&quot;: p_goats,&#10;            &quot;P_extinct_tigers&quot;: p_tigers&#10;        })&#10;&#10;    # put into a DataFrame &amp; save&#10;    df = pd.DataFrame(records)&#10;    df.to_csv(os.path.join(OUT_DIR, &quot;extinction_vs_migration.csv&quot;), index=False)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
              <option name="updatedContent" value="# Script for Three Regions&#10;# This script runs a PRISM model simulation to analyze the extinction probabilities of goats and tigers&#10;# as a function of migration rates. It generates plots for the extinction probabilities of both species&#10;# and saves the results to a CSV file.&#10;&#10;# Simulation Parameters&#10;# Goats1: 300&#10;# Tigers1: 0&#10;# Goats2: 0&#10;# Tigers2: 0&#10;# Goats3: 0&#10;# Tigers3: 300&#10;&#10;&#10;import subprocess&#10;import os&#10;import re&#10;&#10;import numpy as np&#10;import pandas as pd&#10;&#10;# ─── CONFIG ────────────────────────────────────────────────────────────────────&#10;PRISM_EXE = &quot;/home/mohamed/Documents/prism-4.8.1-linux64-x86/bin/prism&quot;&#10;MODEL_FILE = &quot;/home/mohamed/Documents/mg_3.prism&quot;&#10;# number of simulation samples per PRISM call&#10;SIM_SAMPLES = 100&#10;# range of migration rates to sweep&#10;mig_rates = np.arange(0.001, 0.05, 0.00145)&#10;# output directory for plots &amp; CSV&#10;OUT_DIR = &quot;/home/mohamed/PycharmProjects/PythonProject/Results/3_extinction_vs_migration_rate&quot;&#10;os.makedirs(OUT_DIR, exist_ok=True)&#10;&#10;&#10;# ────────────────────────────────────────────────────────────────────────────────&#10;&#10;&#10;def run_prism_query(prism_exe, model_file, props_file, const_str, simsamp):&#10;    cmd = [&#10;        prism_exe,&#10;        model_file,&#10;        props_file,&#10;        &quot;-sim&quot;,&#10;        &quot;-simsamples&quot;, str(simsamp),&#10;        &quot;-const&quot;, const_str&#10;    ]&#10;    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True)&#10;    out = proc.stdout.splitlines()&#10;&#10;    # Regex to capture all result details&#10;    # Example: Result: 1.0 (+/- 0.0 with probability 0.99; rel err 0.0)&#10;    result_pattern = re.compile(r&quot;Result:\s*([0-9.]+) \(\+/- ([0-9.]+) with probability ([0-9.]+); rel err ([0-9.]+)\)&quot;)&#10;    results = []&#10;    for line in out:&#10;        m = result_pattern.search(line)&#10;        if m:&#10;            results.append({&#10;                &quot;value&quot;: float(m.group(1)),&#10;                &quot;error&quot;: float(m.group(2)),&#10;                &quot;probability&quot;: float(m.group(3)),&#10;                &quot;rel_err&quot;: float(m.group(4))&#10;            })&#10;&#10;    if len(results) != 2:&#10;        raise RuntimeError(f&quot;Expected 2 results, got {results}\nFull PRISM output:\n&quot; + &quot;\n&quot;.join(out))&#10;    return results  # [{goats_result_dict}, {tigers_result_dict}]&#10;&#10;&#10;def main():&#10;    props_file = '/home/mohamed/PycharmProjects/PythonProject/Results/3_extinction_vs_migration_rate/ex.props'&#10;&#10;    records = []&#10;    for m in mig_rates:&#10;        const_override = f&quot;migrate_g={m:.6f},migrate_t={m:.6f}&quot;&#10;        print(f&quot;→ running PRISM for migrate = {m:.6f} ...&quot;, end=&quot; &quot;)&#10;        try:&#10;            res_goats, res_tigers = run_prism_query(&#10;                PRISM_EXE, MODEL_FILE, props_file, const_override, SIM_SAMPLES&#10;            )&#10;        except Exception as e:&#10;            print(&quot;ERROR:&quot;, e)&#10;            break&#10;        print(f&quot;  P_goats={res_goats['value']:.4f}, P_tigers={res_tigers['value']:.4f}&quot;)&#10;&#10;        records.append({&#10;            &quot;migrate&quot;: m,&#10;            &quot;P_extinct_goats&quot;: res_goats['value'],&#10;            &quot;P_extinct_tigers&quot;: res_tigers['value'],&#10;            &quot;goats_error&quot;: res_goats['error'],&#10;            &quot;goats_probability&quot;: res_goats['probability'],&#10;            &quot;goats_rel_err&quot;: res_goats['rel_err'],&#10;            &quot;tigers_error&quot;: res_tigers['error'],&#10;            &quot;tigers_probability&quot;: res_tigers['probability'],&#10;            &quot;tigers_rel_err&quot;: res_tigers['rel_err']&#10;        })&#10;&#10;    # put into a DataFrame &amp; save&#10;    df = pd.DataFrame(records)&#10;    df.to_csv(os.path.join(OUT_DIR, &quot;extinction_vs_migration.csv&quot;), index=False)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    main()" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>